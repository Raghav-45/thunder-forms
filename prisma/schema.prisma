generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profiles {
  id    String  @id @db.Uuid
  email String? @db.VarChar(256)

  forms forms[]
}

model forms {
  id             String    @id @default(cuid())
  title          String
  description    String
  fields         Json
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  maxSubmissions Int?
  redirectUrl    String?

  profiles profiles @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId   String   @db.Uuid

  responses response[]
}

model response {
  id        String   @id @default(cuid())
  data      Json
  createdAt DateTime @default(now())

  forms   forms  @relation(fields: [formsId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  formsId String
}

// TODO: Later, we can make this Template Model to be same as the form model and add a field to indicate if it is a template or not
model templates {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  description  String
  fields       Json
  createdBy    String
  createdAt    DateTime @default(now())
  thumbnailUrl String
}

// model templates {
//   id           String   @id @default(cuid())
//   slug         String   @unique
//   title        String
//   description  String
//   createdBy    String
//   createdAt    DateTime @default(now())
//   thumbnailUrl String

//   // This allows you to easily create a template from an existing form.
//   form   forms? @relation(fields: [formId], references: [id], onDelete: SetNull, onUpdate: NoAction)
//   formId String? // Foreign key to the forms model
// }
